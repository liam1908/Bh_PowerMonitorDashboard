<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_FunctionGenerator_plusPhi" Id="{7e6a86df-b8c9-418a-afa4-e5c5d73fc1c6}" SpecialFunc="None">
    <Declaration><![CDATA[// generates a signal build up by the specified function type. v1.2
FUNCTION_BLOCK FB_FunctionGenerator_plusPhi
VAR_INPUT
	bEnable		: BOOL:= TRUE;
	fFrequency	: LREAL:= 1000;	// in [Hz]
	fAmplitude	: LREAL:= 1;
	fPhi		: LREAL	:= 0;		// just for sin / in deg!!
	fOffset		: LREAL;
	nDutyCycle	: UINT:= 50;		// % (for pulse function)
	eFunction	: E_FunctionType:= E_FunctionType.eSine;	
END_VAR
VAR_IN_OUT
	aSignal		: ARRAY[1..10] OF LREAL;	//nOversamples
END_VAR
VAR_OUTPUT
	bError		: BOOL;
END_VAR

VAR
	bInit						: BOOL:= TRUE;
	fbGetTaskIdx				: GETCURTASKINDEX;
	
	fLastFrequency				: LREAL;		// in [Hz]
	fLastAmplitude				: LREAL;
	fLastOffset					: LREAL;
	nLastDutyCycle				: UINT;
	eLastFunction				: E_FunctionType;
	
	nOversamples				: UDINT:= 10;
	
	nSamples					: UDINT;
	fCycleTime					: LREAL;		// in [s]
	fDelta						: LREAL;		// amplitude delta per sample
	fPhase						: LREAL;		// in [°]
	nSign						: INT:= 1;		// 1 or -1
	fLastSignalValue			: LREAL;		// amplitude
	fPeriod						: LREAL;		// in [s]
	fAngularIncrement			: LREAL;		// in [°]
	fAngularIncrementPerCycle	: LREAL;		// in [°]
	fAngularIncrementPerSample	: LREAL;		// in [°]
	(* for modulated signal *)
	fCarrierFrequency			: LREAL:= 500;	// in [Hz] (sine)
	fCarrierAmplitude			: LREAL:= 1;
	fCarrierPeriod				: LREAL;		// in [s]
	fCarrierAngularIncrement			: LREAL;		// in [°]
	fCarrierAngularIncrementPerCycle	: LREAL;		// in [°]
	fCarrierAngularIncrementPerSample	: LREAL;		// in [°]
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bEnable THEN
	IF fLastFrequency <> fFrequency THEN
		bInit:= TRUE; // For automatic initializing
		fLastFrequency:= fFrequency;
	END_IF
	IF fLastAmplitude <> fAmplitude THEN
		bInit:= TRUE; // For automatic initializing
		fLastAmplitude:= fAmplitude;
	END_IF
	IF fLastOffset <> fOffset THEN
		bInit:= TRUE; // For automatic initializing
		fLastOffset:= fOffset;
	END_IF
	IF nLastDutyCycle <> nDutyCycle THEN
		bInit:= TRUE; // For automatic initializing
		nLastDutyCycle:= nDutyCycle;
	END_IF
	IF eLastFunction <> eFunction THEN
		bInit:= TRUE; // For automatic initializing
		eLastFunction:= eFunction;
	END_IF
	IF bInit THEN
		bError := FALSE;
		// Get taks info	
		fbGetTaskIdx();
		fCycleTime:= TwinCAT_SystemInfoVarList._TaskInfo[fbGetTaskIdx.index].CycleTime (*100ns*) / (10.0 * 1000.0 * 1000.0);	
		fLastSignalValue:= 0;
		nSign:= 1;
		fAngularIncrement:= 0;
		// Flush out old data
		MEMSET(ADR(aSignal), 0, SIZEOF(aSignal));
		IF fFrequency <> 0 AND fCycleTime > 0 THEN
			// Calculate period, increments per plc cycle, increment per oversample
			IF nOversamples <> 0 THEN			
				IF eFunction = E_FunctionType.eSine THEN
					fPeriod:= 1/fFrequency;
					fAngularIncrementPerCycle:= 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample:= fAngularIncrementPerCycle/nOversamples;
					// no phase adjustment
					bInit:= FALSE;	
				ELSIF eFunction = E_FunctionType.eSquare	THEN
					fPeriod:= 1/fFrequency;
					fAngularIncrementPerCycle:= 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample:= fAngularIncrementPerCycle/nOversamples;
					fPhase:= 0.5*360;
					bInit:= FALSE;
				ELSIF eFunction = E_FunctionType.ePulse THEN
					fPeriod:= 1/fFrequency;
					fAngularIncrementPerCycle:= 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample:= fAngularIncrementPerCycle/nOversamples;
					IF nDutyCycle > 100 THEN
						nDutyCycle:= 100;
					END_IF
					fPhase:= (UDINT_TO_LREAL(nDutyCycle)/100)*360;
					bInit:= FALSE;					
				ELSIF eFunction = E_FunctionType.eTriangular THEN
					fPeriod:= 1/fFrequency;				
					fAngularIncrementPerCycle:= 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample:= fAngularIncrementPerCycle/nOversamples;
					fPhase:= 0.5*360; 
					fDelta:= 4*(fAmplitude/(360/fAngularIncrementPerSample));				
					bInit:= FALSE;
				ELSIF eFunction = E_FunctionType.eSawtooth THEN
					fPeriod:= 1/fFrequency;			
					fAngularIncrementPerCycle:= 360*(fCycleTime/fPeriod);		
					fAngularIncrementPerSample:= fAngularIncrementPerCycle/nOversamples;
					fDelta:= fAmplitude/(360/fAngularIncrementPerSample);
					bInit:= FALSE;
				ELSIF eFunction = E_FunctionType.eAM THEN
					fPeriod:= 1/fFrequency;
					fAngularIncrementPerCycle:= 360*(fCycleTime/fPeriod);
					fAngularIncrementPerSample:= fAngularIncrementPerCycle/nOversamples;
					// no phase adjustment
					fCarrierPeriod:= 1/fCarrierFrequency;
					fCarrierAngularIncrementPerCycle:= 360*(fCycleTime/fCarrierPeriod);
					fCarrierAngularIncrementPerSample:= fCarrierAngularIncrementPerCycle/nOversamples;				
					// no phase adjustment	
					bInit:= FALSE;			
				ELSE
					bError:= TRUE;	
				END_IF
			ELSE
				bError:= TRUE;
			END_IF
		ELSE
			bError:= TRUE;
		END_IF
	END_IF
	
	// Enable function generator
	IF NOT bError THEN		
		CASE eFunction OF		
			// sine: typical for vibrations originating from rotating machine
			E_FunctionType.eSine: Sine();
			
			// square: mixed sine signals good for analyzing spectrum				
			E_FunctionType.eSquare: Square();
			
			// pulse: mixed sine signals good for analyzing spectrum				
			E_FunctionType.ePulse: Pulse();
	
			// sawtooth: ramp-type vibrations, continuously increasing			
			E_FunctionType.eSawtooth: Sawtooth();
		
			// triangular: mixed sine signals good for analyzing spectrum
			E_FunctionType.eTriangular: Triangular();
		
			// amplitude modulation: typical for vibrations originating from gear-tooth failure or bearing faults
			// Carrier signal with own frequency and amplitude		
			E_FunctionType.eAM: AM();			
		END_CASE
	END_IF
ELSE
	// Flush out old data
	MEMSET(ADR(aSignal), 0, SIZEOF(aSignal));
END_IF]]></ST>
    </Implementation>
    <Method Name="AM" Id="{7ec2937e-e20c-4389-a729-954655587803}">
      <Declaration><![CDATA[METHOD PRIVATE AM
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples:= 1 TO nOversamples DO
	// base signal * carrier signal
	aSignal[nSamples]:= ( fAmplitude*SIN(2*PI*(fAngularIncrement+(nSamples-1)*fAngularIncrementPerSample)/360) + fOffset )
							* ( fCarrierAmplitude*SIN(2*PI*(fCarrierAngularIncrement+(nSamples-1)*fCarrierAngularIncrementPerSample)/360) );
END_FOR
// Increment angular positions
fAngularIncrement:= fAngularIncrement + fAngularIncrementPerCycle;
fCarrierAngularIncrement:= fCarrierAngularIncrement + fCarrierAngularIncrementPerCycle;

{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pulse" Id="{89e90041-f9d2-476b-8c49-505a6675d9df}">
      <Declaration><![CDATA[METHOD PRIVATE Pulse
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples:= 1 TO nOversamples DO
	// For pulse wave (unequal phases)
	IF (fAngularIncrement >= 360) THEN
		fAngularIncrement:= fAngularIncrement - DINT_TO_LREAL(LREAL_TO_DINT(fAngularIncrement/360))*360;
		// or with Tc2_Math library: fAngularIncrement:= LMOD(fAngularIncrement,360);
	END_IF
	IF (fAngularIncrement < fPhase) THEN
		nSign:= 1;		
	ELSIF (fAngularIncrement >= fPhase) THEN
		nSign:= 0;
	END_IF
	fAngularIncrement:= fAngularIncrement + fAngularIncrementPerSample;
	
	aSignal[nSamples]:= nSign*fAmplitude;
	
	aSignal[nSamples]:= aSignal[nSamples] + fOffset;
END_FOR

{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Sawtooth" Id="{89fce061-f8db-409e-b9db-8d8f1fc0570f}">
      <Declaration><![CDATA[METHOD PRIVATE Sawtooth
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples:= 1 TO nOversamples DO
	// For sawtooth wave (equal phase = period/2)
	IF (fAngularIncrement >= 360) THEN
		fAngularIncrement:= fAngularIncrement - DINT_TO_LREAL(LREAL_TO_DINT(fAngularIncrement/360))*360;
		// or with Tc2_Math library: fAngularIncrement:= LMOD(fAngularIncrement,360);
		fLastSignalValue:= fLastSignalValue -fAmplitude;
	END_IF
	fAngularIncrement:= fAngularIncrement + fAngularIncrementPerSample;

	aSignal[nSamples]:= fLastSignalValue + fDelta;

	// Store last sample
	fLastSignalValue:= aSignal[nSamples];
	
	aSignal[nSamples]:= aSignal[nSamples] + fOffset;					
END_FOR	

{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <Method Name="Sine" Id="{7daba178-df3d-41c6-ba40-08f28f262341}">
      <Declaration><![CDATA[METHOD PRIVATE Sine
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples:= 1 TO nOversamples DO
	aSignal[nSamples]:= fAmplitude*SIN((2*PI*(fAngularIncrement+(nSamples-1)*fAngularIncrementPerSample)/360)+(fPhi*PI/180)); // sin(x+PhaseDifference) in grad
	aSignal[nSamples]:= aSignal[nSamples] + fOffset;
END_FOR

// Increment angular position
fAngularIncrement:= fAngularIncrement + fAngularIncrementPerCycle;

{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <Method Name="Square" Id="{a343aacc-c67a-48e9-bc8a-b133d4a37335}">
      <Declaration><![CDATA[METHOD PRIVATE Square
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples:= 1 TO nOversamples DO
	// For square wave (equal phase = period/2)
	IF (fAngularIncrement >= 360) THEN
		fAngularIncrement:= fAngularIncrement - DINT_TO_LREAL(LREAL_TO_DINT(fAngularIncrement/360))*360;
		// or with Tc2_Math library: fAngularIncrement:= LMOD(fAngularIncrement,360);
	END_IF
	IF (fAngularIncrement < fPhase) THEN
		nSign:= 1;
	ELSIF (fAngularIncrement >= fPhase) THEN
		nSign:= -1;
	END_IF
	fAngularIncrement:= fAngularIncrement + fAngularIncrementPerSample;
	
	aSignal[nSamples]:= nSign*fAmplitude;
	
	aSignal[nSamples]:= aSignal[nSamples] + fOffset;
END_FOR

{warning restore C0371}
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Triangular" Id="{e610ae8f-4815-427a-adb9-535fe150f4fa}">
      <Declaration><![CDATA[METHOD PRIVATE Triangular
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}

FOR nSamples:= 1 TO nOversamples DO
	IF (fAngularIncrement >= 360) THEN
		fAngularIncrement:= fAngularIncrement - DINT_TO_LREAL(LREAL_TO_DINT(fAngularIncrement/360))*360;
		// or with Tc2_Math library: fAngularIncrement:= LMOD(fAngularIncrement,360);
	END_IF
	// Negative delta -> Positive delta
	IF fAngularIncrement < fPhase/2 THEN	
		nSign:= 1;		
	ELSIF fAngularIncrement >= fPhase/2 AND fAngularIncrement < 3*fPhase/2 THEN
		nSign:= -1;
	ELSIF fAngularIncrement >= 3*fPhase/2 THEN
		nSign:= 1;	
	END_IF
	fAngularIncrement:= fAngularIncrement + fAngularIncrementPerSample;
	
	aSignal[nSamples]:= fLastSignalValue + nSign*fDelta;
	IF aSignal[nSamples] > fAmplitude THEN
		aSignal[nSamples]:= aSignal[nSamples] - 2*(aSignal[nSamples]-fAmplitude);
	ELSIF aSignal[nSamples] < (-1)*fAmplitude THEN
		aSignal[nSamples]:= aSignal[nSamples] - 2*(aSignal[nSamples]+fAmplitude);
	END_IF
	
	// Store last sample
	fLastSignalValue:= aSignal[nSamples];		
	
	aSignal[nSamples]:= aSignal[nSamples] + fOffset;
END_FOR

{warning restore C0371}	]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="POUImageProperty">
            <n n="ImageData" />
            <v n="TransparencyColor">"White"</v>
            <v n="MakeTransparent">false</v>
          </o>
        </Data>
        <TypeList>
          <Type n="Boolean">System.Boolean</Type>
          <Type n="POUImageProperty">{bb741845-1ec5-4be9-bb0d-2cf7058af574}</Type>
          <Type n="String">System.String</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_FunctionGenerator_plusPhi">
      <LineId Id="3" Count="21" />
      <LineId Id="165" Count="0" />
      <LineId Id="25" Count="91" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator_plusPhi.AM">
      <LineId Id="3" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator_plusPhi.Pulse">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator_plusPhi.Sawtooth">
      <LineId Id="3" Count="18" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator_plusPhi.Sine">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator_plusPhi.Square">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FunctionGenerator_plusPhi.Triangular">
      <LineId Id="3" Count="29" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>